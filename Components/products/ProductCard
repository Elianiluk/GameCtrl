import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Star, ShoppingCart, Heart } from "lucide-react";
import { motion } from "framer-motion";
import { CartItem } from "@/entities/CartItem";

export default function ProductCard({ product, index, viewMode }) {
  const [isAdding, setIsAdding] = useState(false);
  const [isAdded, setIsAdded] = useState(false);

  const formatPrice = (price, originalPrice) => {
    const discount = originalPrice ? Math.round(((originalPrice - price) / originalPrice) * 100) : 0;
    return { discount, hasDiscount: discount > 0 };
  };

  const { discount, hasDiscount } = formatPrice(product.price, product.original_price);

  const addToCart = async () => {
    try {
      setIsAdding(true);
      const userSession = localStorage.getItem('cart_session') || 'session-' + Date.now();
      localStorage.setItem('cart_session', userSession);
      
      await CartItem.create({
        product_id: product.id,
        quantity: 1,
        user_session: userSession
      });
      
      setIsAdded(true);
      setTimeout(() => {
        setIsAdded(false);
      }, 2000);
      
    } catch (error) {
      console.error("Error adding to cart:", error);
    } finally {
      setIsAdding(false);
    }
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.6, delay: index * 0.1 }
    }
  };

  if (viewMode === "list") {
    return (
      <motion.div
        variants={cardVariants}
        initial="hidden"
        animate="visible"
        className="glass-effect rounded-2xl p-6 hover:scale-102 transition-all duration-300 group"
      >
        <div className="flex flex-col md:flex-row gap-6">
          <div className="relative md:w-64 flex-shrink-0">
            <img
              src={product.image_url || `https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=400&h=300&fit=crop`}
              alt={product.name}
              className="w-full h-48 md:h-full object-cover rounded-xl"
            />
            {hasDiscount && (
              <Badge className="absolute top-3 left-3 bg-red-500 text-white">
                -{discount}%
              </Badge>
            )}
          </div>

          <div className="flex-1 flex flex-col justify-between">
            <div>
              <div className="flex items-start justify-between mb-4">
                <div>
                  <Badge variant="outline" className="border-blue-500 text-blue-400 mb-2">
                    {product.brand}
                  </Badge>
                  <h3 className="text-2xl font-bold text-white group-hover:text-blue-400 transition-colors">
                    {product.name}
                  </h3>
                </div>
                <Button variant="ghost" size="icon" className="text-slate-400 hover:text-red-400">
                  <Heart className="w-5 h-5" />
                </Button>
              </div>

              <p className="text-slate-400 leading-relaxed mb-4">
                {product.description}
              </p>

              {product.features && (
                <div className="flex flex-wrap gap-2 mb-4">
                  {product.features.slice(0, 3).map((feature, i) => (
                    <Badge key={i} variant="outline" className="border-slate-600 text-slate-300">
                      {feature}
                    </Badge>
                  ))}
                </div>
              )}

              {product.rating && (
                <div className="flex items-center gap-2 mb-4">
                  <div className="flex items-center gap-1">
                    {Array(5).fill(0).map((_, i) => (
                      <Star
                        key={i}
                        className={`w-4 h-4 ${i < product.rating ? 'text-yellow-400 fill-current' : 'text-slate-600'}`}
                      />
                    ))}
                  </div>
                  <span className="text-slate-400">({product.rating})</span>
                </div>
              )}
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <span className="text-3xl font-bold text-white">${product.price}</span>
                {hasDiscount && (
                  <span className="text-lg text-slate-400 line-through">${product.original_price}</span>
                )}
              </div>
              <Button 
                onClick={addToCart}
                disabled={isAdding || isAdded}
                className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white glow-effect"
              >
                {isAdding ? (
                  <>
                    <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white/30 border-t-white" />
                    Adding...
                  </>
                ) : isAdded ? (
                  <>
                    ✓ Added!
                  </>
                ) : (
                  <>
                    <ShoppingCart className="w-4 h-4 mr-2" />
                    Add to Cart
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      </motion.div>
    );
  }

  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      className="glass-effect rounded-2xl p-6 hover:scale-105 transition-all duration-300 group"
    >
      <div className="relative mb-6">
        <img
          src={product.image_url || `https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=400&h=300&fit=crop`}
          alt={product.name}
          className="w-full h-48 object-cover rounded-xl"
        />
        {hasDiscount && (
          <Badge className="absolute top-3 left-3 bg-red-500 text-white">
            -{discount}%
          </Badge>
        )}
        {product.rating && (
          <div className="absolute top-3 right-3 flex items-center gap-1 bg-black/50 rounded-lg px-2 py-1">
            <Star className="w-4 h-4 text-yellow-400 fill-current" />
            <span className="text-white text-sm">{product.rating}</span>
          </div>
        )}
        <Button 
          variant="ghost" 
          size="icon" 
          className="absolute bottom-3 right-3 bg-black/50 hover:bg-black/70 text-white"
        >
          <Heart className="w-4 h-4" />
        </Button>
      </div>

      <div className="space-y-4">
        <div>
          <Badge variant="outline" className="border-blue-500 text-blue-400 mb-2">
            {product.brand}
          </Badge>
          <h3 className="text-xl font-bold text-white group-hover:text-blue-400 transition-colors">
            {product.name}
          </h3>
          <p className="text-slate-400 text-sm leading-relaxed mt-2">
            {product.description?.substring(0, 120)}...
          </p>
        </div>

        <div className="flex items-center gap-2">
          <span className="text-2xl font-bold text-white">${product.price}</span>
          {hasDiscount && (
            <span className="text-lg text-slate-400 line-through">${product.original_price}</span>
          )}
        </div>

        <Button 
          onClick={addToCart}
          disabled={isAdding || isAdded}
          className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white glow-effect"
        >
          {isAdding ? (
            <>
              <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white/30 border-t-white" />
              Adding...
            </>
          ) : isAdded ? (
            <>
              ✓ Added!
            </>
          ) : (
            <>
              <ShoppingCart className="w-4 h-4 mr-2" />
              Add to Cart
            </>
          )}
        </Button>
      </div>
    </motion.div>
  );
}
