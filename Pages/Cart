
import React, { useState, useEffect } from "react";
import { CartItem, Product } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Trash2, Plus, Minus, ShoppingBag, ArrowLeft } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";

export default function Cart() {
  const [cartItems, setCartItems] = useState([]);
  const [products, setProducts] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [userSession, setUserSession] = useState("");

  useEffect(() => {
    const session = localStorage.getItem('cart_session');
    if (session) {
      setUserSession(session);
      loadCart(session);
    } else {
      // If no session exists, it means the cart is empty for this user (or new user)
      setIsLoading(false);
      setCartItems([]);
      setProducts({});
    }
  }, []);

  const loadCart = async (session) => {
    try {
      const items = await CartItem.filter({ user_session: session });
      setCartItems(items);
      
      // Load product details for items in cart
      const productIds = [...new Set(items.map(item => item.product_id))];
      const productData = {};
      
      for (const productId of productIds) {
        try {
          const product = await Product.get(productId);
          productData[productId] = product;
        } catch (error) {
          console.error(`Error loading product ${productId}:`, error);
        }
      }
      
      setProducts(productData);
    } catch (error) {
      console.error("Error loading cart:", error);
    }
    setIsLoading(false);
  };

  const updateQuantity = async (itemId, newQuantity) => {
    // Ensure newQuantity is a number and non-negative
    newQuantity = parseInt(newQuantity, 10);
    if (isNaN(newQuantity)) return; // Do nothing if input is not a number

    if (newQuantity <= 0) {
      removeItem(itemId);
      return;
    }
    
    try {
      await CartItem.update(itemId, { quantity: newQuantity });
      setCartItems(prev => prev.map(item => 
        item.id === itemId ? { ...item, quantity: newQuantity } : item
      ));
    } catch (error) {
      console.error("Error updating quantity:", error);
    }
  };

  const removeItem = async (itemId) => {
    try {
      await CartItem.delete(itemId);
      setCartItems(prev => prev.filter(item => item.id !== itemId));
    } catch (error) {
      console.error("Error removing item:", error);
    }
  };

  const calculateTotal = () => {
    return cartItems.reduce((total, item) => {
      const product = products[item.product_id];
      return total + (product ? product.price * item.quantity : 0);
    }, 0);
  };

  const calculateSubtotal = () => {
    return calculateTotal();
  };

  const calculateTax = () => {
    return calculateTotal() * 0.08; // 8% tax
  };

  const calculateShipping = () => {
    return calculateTotal() > 50 ? 0 : 9.99; // Free shipping over $50
  };

  if (isLoading) {
    return (
      <div className="min-h-screen text-white p-6 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-slate-400">Loading your cart...</p>
        </div>
      </div>
    );
  }

  if (cartItems.length === 0) {
    return (
      <div className="min-h-screen text-white p-6">
        <div className="max-w-4xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center py-16"
          >
            <div className="text-8xl mb-8">ðŸ›’</div>
            <h1 className="text-4xl font-bold mb-4 text-gradient">Your Cart is Empty</h1>
            <p className="text-xl text-slate-400 mb-8 max-w-2xl mx-auto">
              Ready to find your perfect gaming controller? Browse our collection and add some items to your cart.
            </p>
            <Link to={createPageUrl("Products")}>
              <Button size="lg" className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4">
                <ShoppingBag className="w-5 h-5 mr-2" />
                Start Shopping
              </Button>
            </Link>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen text-white p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-12"
        >
          <div className="flex items-center gap-4 mb-6">
            <Link to={createPageUrl("Products")}>
              <Button variant="outline" size="icon" className="border-slate-600 text-slate-300 hover:bg-slate-800">
                <ArrowLeft className="w-4 h-4" />
              </Button>
            </Link>
            <h1 className="text-4xl md:text-6xl font-bold text-gradient">Shopping Cart</h1>
          </div>
          <p className="text-xl text-slate-400">
            {cartItems.length} item{cartItems.length !== 1 ? 's' : ''} in your cart
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Cart Items */}
          <div className="lg:col-span-2 space-y-6">
            {cartItems.map((item) => {
              const product = products[item.product_id];
              if (!product) return null;

              return (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="glass-effect rounded-2xl p-6"
                >
                  <div className="flex flex-col md:flex-row gap-6">
                    <img
                      src={product.image_url || `https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=200&h=150&fit=crop`}
                      alt={product.name}
                      className="w-full md:w-32 h-32 object-cover rounded-xl"
                    />
                    
                    <div className="flex-1">
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h3 className="text-xl font-bold text-white">{product.name}</h3>
                          <p className="text-slate-400">{product.brand}</p>
                          <p className="text-lg font-semibold text-blue-400 mt-2">${product.price.toFixed(2)}</p>
                        </div>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => removeItem(item.id)}
                          className="text-slate-400 hover:text-red-400"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                      
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="icon"
                            onClick={() => updateQuantity(item.id, item.quantity - 1)}
                            className="border-slate-600 text-slate-300 hover:bg-slate-800"
                          >
                            <Minus className="w-4 h-4" />
                          </Button>
                          <Input
                            type="number"
                            value={item.quantity}
                            onChange={(e) => updateQuantity(item.id, e.target.value)}
                            className="w-16 text-center bg-slate-800/50 border-slate-600 text-white"
                            min="1"
                          />
                          <Button
                            variant="outline"
                            size="icon"
                            onClick={() => updateQuantity(item.id, item.quantity + 1)}
                            className="border-slate-600 text-slate-300 hover:bg-slate-800"
                          >
                            <Plus className="w-4 h-4" />
                          </Button>
                        </div>
                        <span className="text-xl font-bold text-white">
                          ${(product.price * item.quantity).toFixed(2)}
                        </span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>

          {/* Order Summary */}
          <motion.div
            initial={{ opacity: 0, x: 30 }}
            animate={{ opacity: 1, x: 0 }}
            className="glass-effect rounded-2xl p-6 h-fit sticky top-6"
          >
            <h2 className="text-2xl font-bold text-white mb-6">Order Summary</h2>
            
            <div className="space-y-4 mb-6">
              <div className="flex justify-between">
                <span className="text-slate-400">Subtotal</span>
                <span className="text-white">${calculateSubtotal().toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-400">Shipping</span>
                <span className="text-white">
                  {calculateShipping() === 0 ? 'FREE' : `$${calculateShipping().toFixed(2)}`}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-400">Tax</span>
                <span className="text-white">${calculateTax().toFixed(2)}</span>
              </div>
              <div className="border-t border-slate-700 pt-4">
                <div className="flex justify-between">
                  <span className="text-xl font-bold text-white">Total</span>
                  <span className="text-xl font-bold text-white">
                    ${(calculateTotal() + calculateTax() + calculateShipping()).toFixed(2)}
                  </span>
                </div>
              </div>
            </div>

            <Button className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white mb-4 glow-effect">
              Proceed to Checkout
            </Button>
            
            <Link to={createPageUrl("Products")}>
              <Button variant="outline" className="w-full border-slate-600 text-slate-300 hover:bg-slate-800">
                Continue Shopping
              </Button>
            </Link>
          </motion.div>
        </div>
      </div>
    </div>
  );
}
